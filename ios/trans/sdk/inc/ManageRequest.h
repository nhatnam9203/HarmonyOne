//
//  ManageRequest.h
//  POSLink
//
//  Created by sunny on 15-11-15.
//  Copyright (c) 2015年 pax. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "GoogleSmartTapPushService.h"
#import "ApplePayVAS.h"
#import "GoogleSmartTap.h"
#import "MultiMerchant.h"
#if TARGET_OS_IOS
#import <UIKit/UIKit.h>
#else
#import <AppKit/AppKit.h>
#endif
@interface ManageRequest : NSObject

/**
 * Indicate the command type.
 * <p>INIT =1 -This command is use to initialize PAX terminal. PAX terminal will do internal test/check and init the terminal for transactions. If terminal doesn't receive this command after install, the idle menu will display the "disMsg", when terminal receives this command, the idle menu will display the "ildeMsg"<br>
 * GETVAR = 2 -This command is used to get the control variable and configure parameter in the terminal.<br>
 * SETVAR = 3 -This command is used to set the control variable and configure parameter in the terminal.<br>
 * SHOWDIALOG = 4 -Show a half screen with title and buttons. It is supported by MT30 but it is not supported by SP30.<br>
 * GETSIGNATURE = 5 -This command is used to get the signature image file in the terminal. MT30 supports it.<br>
 * SHOWMESSAGE = 6 -Terminal can display 5 line messages, if no clear message received. If terminal received the sixth line message, terminal only displayed the last 5 line messages.<br>
 * CLEARMESSAGE = 7 -Clear the message buffer on terminal, if terminal receives this command, and then receives the show message command, the terminal only displays the message getting from the show message command.<br>
 * RESET = 8 -Reset the terminal to idle state .<br>
 * UPDATEIMAGE = 9 -Used to update image to POS .<br>
 * DOSIGNATURE = 10 -Used to do signature with POS directly.<br>
 * DELETEIMAGE = 11 -Used to delete the POS idle image as image name.<br>
 * SHOWTHANKYOU = 12 -Used to show message center aligned which defaults to the screen as “Thanks You”.<br>
 * REBOOT = 13 -Used to reboot the terminal.<br>
 * GETPINBLOCK = 14 -Used to input PIN and get PINBLOCK back.<br>
 * INPUTACCOUNT = 15 -Used to get account input.<br>
 * RESETMSR = 16 -Used to reset MSR buffer.<br>
 * INPUTTEXT = 17 -Used to get text input.<br>
 * AUTHORIZECARD = 19 -Used to authorize contact EMV card. It only used in the full integration mode.<br>
 * COMPLETEONLINEEMV = 20 -Used to complete the online authorized EMV transaction. It only used in the full integration mode.<br>
 * REMOVECARD = 21 -Used to prompt cardholder to remove card. It only used in the full integraion mode.<br>
 * GETEMVTLVDATA = 22 -Used to get EMV TLV data from terminal. It only used in the full integration mode.<br>
 * SETEMVTLVDATA = 23 -Used to set EMV TLV data to terminal. It only used in the full integration mode.<br>
 * INPUTACCOUNTWITHEMV = 24 -Used to get account input with EMV card support. It only used in the full integration mode.<br>
 * COMPLETECONTACTLESSEMV = 25 -Used to complete the contactless EMV transaction if there's any issue authentication data or issuer script data contained in the host authorization response message. It only used in the full integration mode.<br>
 * SETSAFPARAMETERS = 26 -Used to setting the store and forward related parameters.<br>
 * SHOWTEXTBOX = 27 -Used to showing a text box on terminal.<br>
 * REPRINT = 28 -Used to print the last receipt or any receipt.<br>
 * PRINTER = 29 -Used to print the receipt refer to the generated by POS system.<br>
 * SHOWITEM   = 30 -It is used to show specific item from POS system.<br>
 * CARD INSERT DETECTION = 31 -It is used to detect whether card inserted or not.<br>
 * TOKEN ADMINISTRATIVE  = 32 -It is used to do token administration with depending on hosts..<br>
 * SHOWDILOGFORM = 33 -Used to show screen with title and buttons or menuitems.<br>
 * CAMERA SCAN = 34 -This command only valid for the devices which have camera.<br>
 * VAS SET MERCHANT PARAMETERS = 35 -This command is used to configure the parameters of Apple VAS or Google SmartTap..<br>
 * VAS PUSH DATA = 36 -This command is used to configure the parameters of Google SmartTap to push data from terminal to mobile, such as merchant info.<br>
 * MIFARE CARD = 37 -This command is used to operate MIFARE card..<br>
 * Get SAF Parameters = 38 -This command is used for getting the store and forward (SAF) related parameters.
 * SESSIONKEYINJECTION = 40 -This command is used to inject a session key to a terminal..
 * MACCALCULATION = 41 -This command is used for MAC Calculation..
 * GETPEDINFORMATION = 42 -This command is used for getting PED Information.
 * INCREASEKSN = 43 -This command is used to get increase KSN.

 * An Error will be returned  while invoking POSLink.ProcessTrans if user set other value.<br>
 * User can assign the TransType by com.PAX.POSLink.ManageRequest.ParseTransType or assign an integer directly.<br>
 * Example:<br>
 *    ManageRequest manage = new ManageRequest();<br>
 *       manage.TransType = manage.ParseTransType("GETVAR");  //recommend<br>
 *    or<br>
 *    manage.TransType = 1;<br>
 *
 */
@property (nonatomic)  int TransType;

/**
 *Indicate the EDC type.
 *<p>ALL = 0<br>
 *CREDIT = 1<br>
 *DEBIT = 2<br>
 *CHECK = 3<br>
 *EBT = 4<br>
 *GIFT = 5<br>
 *LOYALTY = 6<br>
 *CASH = 7<br>
 *Only above value accepted, other value will be omitted.<br>
 *EBT includes EBT_FOODSTAMP and EBT_CASHBENEFIT.<br>
 * User can assign the EDCType by com.PAX.POSLink.ManageRequest.ParseEDCType or assign an integer directly. <br>
 * Example:
 *     ManageRequest manage = new ManageRequest(); <br>
 *        manage.EDCType = manage.ParseEDCType("CREDIT");  //recommend <br>
 *     or <br>
 *     manage.EDCType = 1;<br>
 */
@property (nonatomic)  int EDCType;

/**
 * Indicate the payment type.
 * <p>UNKNOWN = 0.<br>
 * AUTH = 1.<br>
 * SALE = 2.<br>
 * RETURN = 3.<br>
 * VOID = 4.<br>
 * POSTAUTH = 5.<br>
 * FORCEAUTH = 6.<br>
 * CAPTURE = 7.<br>
 * REPEATSALE = 8.<br>
 * CAPTUREALL = 9.<br>
 * ADJUST = 10.<br>
 * INQUIRY = 11.<br>
 * ACTIVATE = 12.<br>
 * DEACTIVATE = 13.<br>
 * RELOAD = 14.<br>
 * VOID SALE = 15.<br>
 * VOID RETURN = 16.<br>
 * VOID AUTH = 17.<br>
 * VOID POSTAUTH = 18.<br>
 * VOID FORCEAUTH = 19.<br>
 * VOID WITHDRAWAL = 20.<br>
 * REVERSAL = 21.<br>
 * WITHDRAWAL = 22.<br>
 * ISSUE = 23.<br>
 * CASHOUT = 24.<br>
 * REPLACE = 25.<br>
 * MERGE = 26.<br>
 * REPORTLOST = 27.<br>
 * REDEEM = 28.<br>
 * STATUS_CHECK = 29.<br>
 * SETUP = 30.<br>
 * INIT = 31.<br>
 * VERIFY = 32.<br>
 * REACTIVATE = 33.<br>
 * FORCED ISSUE = 34.<br>
 * FORCED ADD = 35.<br>
 * UNLOAD = 36.<br>
 * RENEW = 37.<br>
 * Only above value accepted, other value will be omitted.<br>
 * User can assign the Trans by com.PAX.POSLink.ManageRequest.ParseTrans or assign an integer directly.<br>
 * Example:<br>
 *    ManageRequest manage = new ManageRequest();<br>
 *       manage.Trans = manage.ParseTrans("ADJUST");  //recommend<br>
 *    or<br>
 *    manage.Trans = 10;<br>
 *
 */
@property (nonatomic)  int Trans;

/**
 * The name of the variable.
 * <p>Only valid while transType is GETVAR/SETVAR<br>
 */
@property (nonatomic) NSString* VarName;

/**
 * The name of the variable 1.
 * <p>Only valid while transType is GETVAR/SETVAR<br>
 */
@property (nonatomic) NSString* VarName1;

/**
 * The name of the variable 2.
 * <p>Only valid while transType is GETVAR/SETVAR<br>
 */
@property (nonatomic) NSString* VarName2;


/**
 * The name of the variable 3.
 * <p>Only valid while transType is GETVAR/SETVAR<br>
 */
@property (nonatomic) NSString* VarName3;

/**
 * The name of the variable 4 .
 * <p>Only valid while transType is GETVAR/SETVAR<br>
 */
@property (nonatomic) NSString* VarName4;
/**
 * The value of the variable.
 * <p>Only valid while transType is SETVAR<br>
 */
@property (nonatomic) NSString* VarValue;
/**
 * The value of the variable 1.
 * <p>Only valid while transType is SETVAR<br>
 */
@property (nonatomic) NSString* VarValue1;
/**
 * The value of the variable 2.
 * <p>Only valid while transType is SETVAR<br>
 */
@property (nonatomic) NSString* VarValue2;
/**
 * The value of the variable 3.
 * <p>Only valid while transType is SETVAR<br>
 */
@property (nonatomic) NSString* VarValue3;
/**
 * The value of the variable 4.
 * <p>Only valid while transType is SETVAR<br>
 */
@property (nonatomic) NSString* VarValue4;
/**
 * The display title on terminal.
 * <p>Only valid while transType is SHOWDIALOG / GETPINBLOCK /INPUTTEXT. <br>
 */
@property (nonatomic) NSString* Title;
/**
 * The name of button1 on terminal
 * <p>Only valid while transType is SHOWDIALOG / SHOWDIALOGFORM<br>
 */
@property (nonatomic) NSString* Button1;
/**
 * The name of button2 on terminal
 * <p>Only valid while transType is SHOWDIALOG / SHOWDIALOGFORM<br>
 */
@property (nonatomic) NSString* Button2;
/**
 * The name of button3 on terminal
 * <p>Only valid while transType is SHOWDIALOG<br>
 */
@property (nonatomic) NSString* Button3;
/**
 * The name of button4 on terminal
 * <p>Only valid while transType is SHOWDIALOG<br>
 */
@property (nonatomic) NSString* Button4;
/**
 * The start offset of the signature image
 * <p>Only valid while transType is GETSIGNATURE<br>
 * @deprecated
 */
//public String Offset= "" ;
/**
 * The request length,
 * <p>Only valid while transType is GETSIGNATURE<br>
 * @deprecated
 */
//public String ReqLen= "" ;
/**
 * The display message on terminal
 * <p>Only valid while transType is SHOWMESSAGE<br>
 */
@property (nonatomic) NSString* DisplayMessage;

/**
 * The display message line2 on terminal
 * <p>Only valid while transType is SHOWMESSAGE<br>
 */
@property (nonatomic) NSString* DisplayMessage1;

/**
 * <p>Only valid while transType is SHOWMESSAGE<br>
 */
@property (nonatomic) NSString* TopDown;

/**
 * <p>Only valid while transType is SHOWMESSAGE<br>
 */
@property (nonatomic) NSString* TaxLine;

/**
 * <p>Only valid while transType is SHOWMESSAGE<br>
 */
@property (nonatomic) NSString* TotalLine;

/**
 * <p>Only valid while transType is SHOWMESSAGE<br>
 */
@property (nonatomic) NSString* ImageDescription;

/**
 * The path of ".zip" file, the "zip" including idle images must be BMP
 * format and the suffix must be ".r" . The image name must be
 * mt30_ad0.r/mt30_ad1.r/mt30_ad2.r
 * <p>
 * Only valid while transType is UPDATEIMAGE<br>
 */
@property (nonatomic) NSString* ImagePath;
/**
 * The X axis position of the upper-left corner of the region
 * <p>Only valid while transType is CLEARSCREEN<br>
 */
@property (nonatomic) NSString* X;
/**
 * Y axis position of the upper-left corner of the region
 * <p>Only valid while transType is CLEARSCREEN<br>
 */
@property (nonatomic) NSString* Y;
/**
 * the pixels width of the region to be cleared
 * <p>Only valid while transType is CLEARSCREEN<br>
 */
@property (nonatomic) NSString* W;
/**
 * the pixels height of the region to be cleared
 * <p>Only valid while transType is CLEARSCREEN<br>
 */
@property (nonatomic) NSString* H;
/**
 * The Image data of ".zip" file, the "zip" including idle images must be BMP format and the suffix must be ".r" . The image name must be mt30_ad0.r/mt30_ad1.r/mt30_ad2.r
 * <p>Only valid while transType is UPDATEIMAGE<br>
 */
@property (nonatomic) NSData* ImageData;
/**
 * the name of image  must be mt30_ad0/mt30_ad1/mt30_ad2
 * <p>Only valid while transType is DELETEIMAGE<br>
 */
@property (nonatomic) NSString* ImageName;
/**
 * the upload flag ,the value is as below:
 * <p>1: need upload to host
 * 0: do not need upload to host
 * the default value is 0
 * Only valid while transType is DOSIGNATURE<br>
 */
@property (nonatomic) int Upload;
/**
 * the host reference number
 * <p>Only valid while transType is DOSIGNATURE<br>
 */
@property (nonatomic) NSString* HRefNum;
/**
 * The timeout for DOSIGNATURE/ GETPINBLOCK / INPUTACCOUNT / INPUTTEXT in 100ms..
 * <p>For DOSIGNATURE, the value must be more than 150.
 * <p>For GETPINBLOCK, valid value should be [0, 3000].
 * The value of "" means waiting till user canceled or confirmed.
 * <P>For INPUTACCOUNT, valid value should be [200, 600].
 * <p>For INPUTTEXT, valid value should be [1, 9999].
 * The value of "" means waiting till user canceled or confirmed.<br>
 */
@property (nonatomic) NSString* TimeOut;
/**
 * The title of thank you screen
 * <p>Only valid while transType is SHOWTHANKYOU /SHOWDIALOGFORM<br>
 */
@property (nonatomic) NSString* ThankYouTitle;
/**
 * The message1 of thank you screen
 * <p>Only valid while transType is SHOWTHANKYOU<br>
 */
@property (nonatomic) NSString* ThankYouMessage1;
/**
 * The message2 of thank you screen
 * <p>Only valid while transType is SHOWTHANKYOU<br>
 */
@property (nonatomic) NSString* ThankYouMessage2;
/**
 * The timeout of thank you screen
 * <p>Only valid while transType is SHOWTHANKYOU<br>
 */
@property (nonatomic) NSString* ThankYouTimeOut;
/**
 * The pinpad type to display transaction approval/decline messages on the external reader.
 * <p>Only valid while transType is SHOWTHANKYOU / GETPINBLOCK / AUTHORIZECARD / REMOVECARD<br>
 */
@property (nonatomic) NSString* PinpadType;
/**
 * Account Number. Should be 13-19 digits.
 * <p>Required for "PIN Algorithm" as 0 or 3 for GETPINBLOCK<br>
 */
@property (nonatomic) NSString* AccountNumber;
/**
 * Encryption Type. Default as 1.
 * <p>The value is as below:
 * 1: DUKPT.<br>
 * Note: now terminal only supports DUKPT.<br>
 */
@property (nonatomic) NSString* EncryptionType;

/**
 * Key Slot.
 * <p>Required for GETPINBLOCK/INPUTACCOUNT<br>
 */
@property (nonatomic) NSString* KeySlot;

/**
 * Flag indicates whether NULL PIN allowed during PIN entry.
 * <p>Default as 0. Valid values:<br>
 * 0 - Not allowed, 1 - Allowed.<br>
 * Valid for GETPINBLOCK<br>
 */
@property (nonatomic) NSString* NullPinFlag;

/**
 * PIN Algorithm.
 * <p>Default as 0. Valid values:<br>
 * 0: ISO9564_0 1: ISO9564_1 3: ISO9564_3<br>
 * Valid for GETPINBLOCK<br>
 */
@property (nonatomic) NSString* PinAlgorithm;

/**
 * Flag indicates whether magnetic card swipe is allowed.
 * <p>Default as 0. Valid values:<br>
 * 0 - Not allowed, 1 - Allowed.<br>
 * Valid for INPUTACCOUNT<br>
 */
@property (nonatomic) NSString* MagneticSwipeEntryFlag;

/**
 * Flag indicates whether manual entry is allowed.
 * <p>Default as 0. Valid values:<br>
 * 0 - Not allowed, 1 - Allowed.<br>
 * Valid for INPUTACCOUNT<br>
 */
@property (nonatomic) NSString* ManualEntryFlag;

/**
 * Flag indicates whether contactless entry is allowed.
 * <p>Default as 0. Valid values:<br>
 * 0 - Not allowed, 1 - Allowed.<br>
 * Valid for INPUTACCOUNT<br>
 */
@property (nonatomic) NSString* ContactlessEntryFlag;

/**
 * Flag indicates whether scanner entry is allowed.
 * <p>Default as 0. Valid values:<br>
 * 0 - Not allowed, 1 - Allowed.<br>
 * Valid for INPUTACCOUNT<br>
 */
@property (nonatomic) NSString* ScannerEntryFlag;

/**
 * Flag indicates whether expiry date needs to be prompted during manual entry.
 * <p>Default as 0. Valid values:<br>
 * 0 - Not prompted, 1 - to prompt.<br>
 * Valid for INPUTACCOUNT<br>
 */
@property (nonatomic) NSString* ExpiryDatePrompt;

/**
 * Encryption Method for captured account data.
 * <p>Default as 0. Valid values:<br>
 * 0 - for not encrypted, 1 - DUKPT DES with PIN method.<br>
 * Valid for INPUTACCOUNT<br>
 */
@property (nonatomic) NSString* EncryptionFlag;

/**
 * MIN length for account. Default as 10. Valid value [1, 32].
 * <p>Valid for INPUTACCOUNT<br>
 */
@property (nonatomic) NSString* MINAccountLength;

/**
 * MAX length for account. Default as 19. Valid value [1, 32].
 * <p>Valid for INPUTACCOUNT<br>
 */
@property (nonatomic) NSString* MAXAccountLength;


/**
 * MIN length for PIN entry. Default as 4.
 * <p>
 * Valid for GETPINBLOCK/AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* PinMinLength;

/**
 * MAX length for PIN entry. Default as 12
 * <p>
 * Valid for GETPINBLOCK/AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* PinMaxLength;

/**
 * Default Input Value with max length of 32.
 * <p>Default as 0. Valid values:<br>
 * 0 - Alpha-Numeric string, 1 - Numeric string.
 * 2 - date in MMDDYYYY format, 3 - time in HHMMSS format.
 * Valid for INPUTTEXT<br>
 */
@property (nonatomic) NSString* InputType;

/**
 * Default Input Value with max length of 32.
 * <p>Valid for INPUTTEXT<br>
 */
@property (nonatomic) NSString* DefaultValue;

/**
 * MIN length. Default as 0. Valid value [0, 32].
 * <p>Valid for INPUTTEXT<br>
 */
@property (nonatomic) NSString* MINLength;

/**
 * MAX length. Default as 32. Valid value [1, 32].
 * <p>Valid for INPUTTEXT<br>
 */
@property (nonatomic) NSString* MAXLength;

/**
 * The file name with the suffix. Valid length [1, 16].
 * <p>Valid for CHECKFILE<br>
 */
@property (nonatomic) NSString* FileName;

/**
 *Transaction total amount$$$$$$$CC.
 *<p>Valid for AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* Amount;

/**
 *Cash back amount$$$$$$$CC.
 *<p>Valid for AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* CashBackAmt;

/**
 *The merchant surcharge fee, $$CC.
 *<p>If the setting in terminal of "merchant fee" is 0, this field must be NULL or 0.
 If the setting in terminal of "merchant fee" is not 0, this field can be exist or NULL, if the value is NULL, terminal will use the default value in terminal.
 Only debit sale and ebt cash benefit sale support it.
 Valid for AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* SurchargeAmt;

/**
 *Tip amount $$$$$$$CC.
 *<p>Valid for AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* TipAmt;

/**
 *Tax amount $$$$$$$CC.
 *<p>Valid for AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* TaxAmt;

/**
 *Transaction currency code. The default value is USD "0840".
 *<p>Example:
 currency code of USD is "0840"
 Valid for AUTHORIZECARD/INPUTACCOUNTWITHEMV<br>
 */
@property (nonatomic) NSString* CurrencyCode;

/**
 *TTransaction country code. The default value is US "0840".
 *<p>Example:
 country code of US is "0840"
 Valid for AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* CountryCode;

/**
 *Merchant decision to the current transaction. The default value is 0.
 *<p>0: default (no merchant decision)
 1: force online
 2: force decline
 3: force acceptance
 Valid for AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* MerchantDecision;

/**
 *Extended data in XML format
 */
@property (nonatomic) NSString* ExtData;

/**
 *MultiMerchant Information.
 */
@property (nonatomic) MultiMerchant* MultiMerchant;

/**
 *Indicate the result of online authorization.
 *<p>0: transaction approved online
 1: transaction declined online
 2: connect host failed
 Valid for COMPLETEONLINEEMV<br>
 */
@property (nonatomic) NSString* OnlineAuthorizationResult;

/**
 *Host authorization response code.
 *<p>Valid for COMPLETEONLINEEMV<br>
 */
@property (nonatomic) NSString* ResponseCode;

/**
 *Host authorization code.
 *<p>Valid for COMPLETEONLINEEMV<br>
 */
@property (nonatomic) NSString* AuthorizationCode;

/**
 *If issuer authentication data (tag 91) is returned by host, it shall be set to terminal.
 *<p>Valid for COMPLETEONLINEEMV/COMPLETECONTACTLESSEMV<br>
 */
@property (nonatomic) NSString* IssuerAuthenticationData;

/**
 *If issuer script (tag 71) is returned by host, it shall be set to terminal.
 *<p>Valid for COMPLETEONLINEEMV/COMPLETECONTACTLESSEMV<br>
 */
@property (nonatomic) NSString* IssuerScript1;

/**
 *f issuer script (tag 72) is returned by host, it shall be set to terminal.
 *<p>Valid for COMPLETEONLINEEMV/COMPLETECONTACTLESSEMV<br>
 */
@property (nonatomic) NSString* IssuerScript2;

/**
 *the first line of message displayed on screen.
 *<p>Valid for REMOVECARD<br>
 */
@property (nonatomic) NSString* Message1;

/**
 *the second line of message displayed on screen.
 *<p>Valid for REMOVECARD<br>
 */
@property (nonatomic) NSString* Message2;

/**
 *EMV TLV type.
 *<p>00 for EMV contact
 01 for EMV contactless
 Valid for GETEMVTLVDATA/SETEMVTLVDATA<br>
 */
@property (nonatomic) NSString* TLVType;

/**
 *List of requested tags. All the tags are consecutive without any separator.
 *<p>Example:
 Request for tag 0x9F26 0x9F27 0x4F, then this field would be: "9F269F274F"
 Valid for GETEMVTLVDATA AUTHORIZECARD<br>
 */
@property (nonatomic) NSString* TagList;

/**
 *EMV data.
 *<p>If contact EMV card is read successfully, some related EMV data will be returned in consecutive TLV format data.
 Format: tag + data
 Note: All the EMV TLV data shall be expanded to double length.
 Example:
 AID (A0 00 00 00 04 10 10)"\x4F\x07\xA0\x00\x00\x00\x04\x10\x10" -> "4F07A0000000041010" Cardholder Name ("JACK")"\x5F\x20\x04\x4A\x41\x43\x4B" -> "5F20044A41434B" Valid for SETEMVTLVDATA<br>
 */
@property (nonatomic) NSString* EMVTLVData;

/**
 *Flag indicates whether contact EMV entry is allowed.
 *<p>Default as 0. Valid values:
 0 - Not allowed, 1 - Allowed.
 Valid for INPUTACCOUNTWITHEMV<br>
 */
@property (nonatomic) NSString* ContactEMVEntryFlag;

/**
 *Store and forward mode indicator
 *<p>0: Stay Online.
 1: Stay Offline
 2: Offline Till batch.
 3: On Demand/Auto.
 Valid only when TransType = SETSAFPARAMETERS<br>
 */
@property (nonatomic) NSString* SAFMode;

/**
 The effective start date time, YYYYMMDDhhmmss
 Valid for SAF mode as 1.
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* StartDateTime;

/**
 The effective end date time, YYYYMMDDhhmmss
 Valid for SAF mode as 1.
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* EndDateTime;

/**
 SAF On for next number of days from today
 Valid for SAF mode as 1.
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* DurationInDays;

/**
 SAF max number of record - SAF only support this number of records. i.e. 50 SAF only, once it reached it will stop working
 Default value is 9999 if it is not to be set.
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* MaxNumber;

/**
 Total ceiling amount. Once this amount is reached it will not accept any SAF record
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* TotalCeilingAmount;

/**
 Once this amount is reached it will not accept any SAF record.
 Separated by Card Type with space in the card type sequence of “Visa Mastercard AMEX Diners Discover JCB enRoute Extended(others)”, i.e. “2000 2000 2000 2000 2000 2000 2000 2000”
 Default as empty which means ceiling amounxt validation will not be started during SAF.
 Please note that the amount format is $$$$CC.
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* CeilingAmountPerCardType;

/**
 Once this amount per trans is reached it will not accept any SAF record.
 Separated by Card Type with space in the card type sequence of “Visa Mastercard AMEX Diners Discover JCB enRoute Extended(others)”, i.e. “2000 2000 2000 2000 2000 2000 2000 2000”
 Default as empty which means HALO amount.
 Please note that the amount format is $$$$CC.
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* HALOPerCardType;

/**
 SAF Uploading mode.
 0: Upload before batch.
 1: Silent Auto Upload.
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* SAFUploadMode;

/**
 Auto uploading checking interval in unit of 100ms.
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* AutoUploadIntervalTime;

/**
 Delete SAF Confirmation. Default as 0.
 0: with Prompt.
 1: without Prompt.
 Valid only when TransType = SETSAFPARAMETERS
 */
@property (nonatomic) NSString* DeleteSAFConfirmation;

/**
 Please use the hexadecimal to represent the color.
 For example, ffffff which represent the white color.
 00ff00 which means the green color. If this value not to be set, the default value will be used.
 Valid only when TransType = SHOWTEXTBOX
 */
@property (nonatomic) NSString* ButtonColor1;

/**
 Please use the hexadecimal to represent the color.
 For example, ffffff which represent the white color.
 00ff00 which means the green color. If this value not to be set, the default value will be used.
 Valid only when TransType = SHOWTEXTBOX
 */
@property (nonatomic) NSString* ButtonColor2;

/**
 Please use the hexadecimal to represent the color.
 For example, ffffff which represent the white color.
 00ff00 which means the green color. If this value not to be set, the default value will be used.
 Valid only when TransType = SHOWTEXTBOX
 */
@property (nonatomic) NSString* ButtonColor3;

/**
 The display text on terminal.
 Valid only when TransType= SHOWTEXTBOX
 */
@property (nonatomic) NSString* Text;

/**
 * The hard key to be mapped for Button 1. Refer to Hard Keys Definition in API GUIDE<br>
 * Only valid while transType is SHOWTEXTBOX<br>
 */
@property (nonatomic) NSString* ButtonKey1;

/**
 * The hard key to be mapped for Button 2. Refer to Hard Keys Definition in API GUIDE<br>
 * Only valid while transType is SHOWTEXTBOX<br>
 */
@property (nonatomic) NSString* ButtonKey2 ;

/**
 * The hard key to be mapped for Button 3. Refer to Hard Keys Definition in API GUIDE<br>
 * Only valid while transType is SHOWTEXTBOX<br>
 */
@property (nonatomic) NSString* ButtonKey3;

/**
 * Whether to disable virtual button displaying.<br>
 *1 – Enable Hard Key only.<br>
 *0 – Enable both virtual button and hard keys.<br>
 *0 as Default.<br>
 * Only valid while transType is SHOWTEXTBOX<br>
 */
@property (nonatomic) NSString* EnableHardKey;


/**
 * Hard keys separated by <SPACE>, like “KEY0 KEY1”. Refer to Hard Keys Definition in API GUIDE.<br>
 *All hard keys are enabled if this field is blank from POS.<br>
 * Only valid while transType is SHOWTEXTBOX<br>
 */
@property (nonatomic) NSString* HardKeyList;

/**
 Signature Box:
 0 – no signature box(default value)
 1 – show signature box
 The signature box should be displayed in the last page before the Button Key display. If the signature box is displayed, the three button will be automatically assigned to “Cancel”, “Clear” and “Accept” state.
 * Only valid while transType is SHOWTEXTBOX<br>
 */
@property (nonatomic) NSString* SignatureBox;

/**
 * It can be empty or 7 (QRCODE)
 * If you specify Barcode Data, currently this field must be 7(QRCODE). Otherwise this field should be empty.
 * Only valid when transType = SHOWTEXTBOX.
 */
@property (nonatomic) NSString* BarcodeType;

/**
 * If you specify Barcode Type, you must specify Barcode Data.
 * For QRCODE, the recommended data length scope is [1, 126]
 * Only valid when transType = SHOWTEXTBOX.
 */
@property (nonatomic) NSString* BarcodeData;

/**
 * Transaction Time/date stamp<br>
 */
@property (nonatomic) NSString* Timestamp;

/**
 * Store and forward upload type indicator
 * 0: New stored transaction
 * 1: Failed transaction
 * 2: All (upload/resend Failed + New records)
 * <p>Only valid when TransTYpe = SAFUPLOAD and DELETESAFFILE<br>
 */
@property (nonatomic) NSString* SAFIndicator;

/**
 Whether to print the last receipt indictor.
 1 to print.
 Only valid when TransType = REPRINT.
 */
@property (nonatomic) NSString *LastReceipt;

/**
 Retrieve the transaction record with the matching transaction number.
 0 < Index <= 5000, normal data base.
 5000 < Index <= 9000, stored data base for SAF.
 9000 < Index <= 9999, failed data base for SAF.
 Only valid when TransType = REPRINT.
 */
@property (nonatomic) NSString *RefNum;

/**
 Retrieve the transaction record with the ECR reference number.
 Only valid when TransType = REPRINT.
 */
@property (nonatomic) NSString *ECRRefNum;

/**
 Receipt printing for current command, default as "3 – Both merchant /customer copy":
 0 – no receipt
 1 - merchant only
 2 - customer only
 3 - Both merchant /customer copy
 Only valid when TransType = REPRINT.
 */
@property (nonatomic) NSString *ReceiptPrint;

/**
 Indicate how many receipts want to print.
 Default is 1.
 Only valid when TransType = PRINTER.
 */
@property (nonatomic) NSString *PrintCopy;

/**
 Variable length up to 4000.
 Only valid when TransType = REPRINT.
 */
@property (nonatomic) NSString *PrintData;

/**
 Support more than one item.
 Only valid when TransType = SHOWITEM.
 */
@property (nonatomic) NSString *ItemData;

/**
 Token Command.
 Only valid when TransType = TOKENADMINISTRATIVE.
 */
@property (nonatomic) NSString *TokenCommand;

/**
 Token Value.
 Only valid when TransType = TOKENADMINISTRATIVE.
 */
@property (nonatomic) NSString *Token;
/**
 Token SN.
 Only valid when TransType = TOKENADMINISTRATIVE.
 */
@property (nonatomic) NSString *TokenSN;
/**
 Fallback Swipe Entry Flag.
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *FallbackSwipeEntryFlag;

/**
 Laser Scanner Flag
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *LaserScannerFlag;

/**
 Front Camera Flag
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *FrontCameraFlag;

/**
 Rear Camera Flag
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *RearCameraFlag;

/**
 CVV prompt
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *CVVPrompt;

/**
 zip Code Prompt
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *ZipCodePrompt;

/**
 Padding Char
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *PaddingChar;

/**
 Track Data Sentinel
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *TrackDataSentinel;
/**
 EMV Kernel Config Selection
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *EMVKernelConfigSelection;

/**
 Transaction Date
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *TransactionDate;
/**
 Transaction time
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *TransactionTime;

/**
 Currency Exponent
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *CurrencyExponent;

/**
 Merchant Category Code
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *MerchantCategoryCode;

/**
 9F41: Transaction Sequence Number.
 Counter maintained by the terminal that is incremented by one for each transaction
 */
@property (nonatomic) NSString *TransationSequenceNumber;
/**
 PIN Bypass
 Only valid when TransType = AUTHORIZECARD.
 */

@property (nonatomic) NSString *PINBypass;

/**
 Two lines of text, (use all available space)
 */
@property (nonatomic) NSString *Label1;

/**
 Two lines of text, (use all available space)
 Only valid when TransType = SHOWDIALOGFORM.
 */
@property (nonatomic) NSString *Label2;

/**
 Two lines of text, (use all available space)
 Only valid when TransType = SHOWDIALOGFORM.
 */
@property (nonatomic) NSString *Label3;

/**
 Two lines of text, (use all available space)
 Only valid when TransType = SHOWDIALOGFORM.
 */
@property (nonatomic) NSString *Label4;

/**
 Label 1 property value:
 0 - Unchecked (default)
 1 - Checked
 Relevant only if the ButtonType is “CheckBox”.
 Only valid when TransType = SHOWDIALOGFORM.
 */
@property (nonatomic) NSString *Label1Property;

/**
 Label 1 property value:
 0 - Unchecked (default)
 1 - Checked
 Relevant only if the ButtonType is “CheckBox”.
 Only valid when TransType = SHOWDIALOGFORM.
 */
@property (nonatomic) NSString *Label2Property;

/**
 Label 1 property value:
 0 - Unchecked (default)
 1 - Checked
 Relevant only if the ButtonType is “CheckBox”.
 Only valid when TransType = SHOWDIALOGFORM.
 */
@property (nonatomic) NSString *Label3Property;

/**
 Label 1 property value:
 0 - Unchecked (default)
 1 - Checked
 Relevant only if the ButtonType is “CheckBox”.
 Only valid when TransType = SHOWDIALOGFORM.
 */
@property (nonatomic) NSString *Label4Property;

/**
 ‘0’- Rear camera (default)
 ‘1’ – Front camera
 Only valid when TransType = CAMERASCAN.
 */
@property (nonatomic) NSString *Reader;

/**
 Button Type value:
 1 - Radio Button (default). It allows the user to choose only one of a predefined set of mutually exclusive options, and the API returns right after selection.
 2 - CheckBox.  It allows the user to choose multiple entities of a predefined set of options, and the API is returned upon key press.
 “CANCEL” – API return abort
 “CLEAR” will clear the CheckBox selection
 “ACCEPT” – API return accept
 Only valid when TransType = SHOWDIALOGFORM.
 */
@property (nonatomic) NSString *ButtonType;

/**
 ‘1’ – Apple VAS
 ‘2’ – Google VAS
 Only valid when TransType = VASSETMERCHANTPARAMETERS.
 */
@property (nonatomic) NSString *VASProgram;


/**
 VAS Mode
 0 --- VAS_ONLY
 1 --- VAS_AND_PAYMENT
 2 --- VAS_OR_PAYMENT
 3 --- PAYMENT_ONLY
 Only valid when TransType = VASSETMERCHANTPARAMETERS and VASPUSHDATA.
 */
@property (nonatomic) NSString *VASMode;

/**
 Apple VAS or Google VAS specific data. please refer to section 4.20.1 and 4.20.2 for detail
 Only valid when TransType = VASSETMERCHANTPARAMETERS.
 */
@property (nonatomic) NSString *VASSpecificData;

/**
 Apple VAS or Google VAS specific data. please refer to section 4.20.1 and 4.20.2 for detail
 Only valid when TransType = VASSETMERCHANTPARAMETERS.
 */
@property (nonatomic) NSString *SmartTapData;

/**
 0 --- Normal flow if error
 1 --- End tap if error
 Only valid when TransType = VASSETMERCHANTPARAMETERS.
 */
@property (nonatomic) NSString *EndTap;

/**
 ‘0’ default.
 ‘1’ indicate the terminal not go to idle screen but waiting for the next command.
 */
@property (nonatomic) NSString *ContinuousScreen;

/**
 Line item action:
 0: add(default value)
 1: update
 2: delete
 */
@property (nonatomic) NSString *LineItemAction;

/**
 Item Index, this used to indicate which item line need to update/delete.
 The terminal supports update/delete multiple item lines with one command. “|”is the separator, here is the example: “12|23|45”.
 */
@property (nonatomic) NSString *ItemIndex;

/**
 M1 Command type:
 0: read
 1: write
 2: operate with increase value
 3: operate with decrease value
 4: operate with backup value
 */
@property (nonatomic) NSString *M1Command;

/**
 Block number indicator
 */
@property (nonatomic) NSString *BlockNo;

/**
 Password to authority
 */
@property (nonatomic) NSString *Password;

/**
 Password type:
 0: password A type
 1: password B type
 */
@property (nonatomic) NSString *PasswordType;

/**
 Only valid when M1 Command type is
 1: write.
 2: operate with increase value.
 3: operate with decrease value.
 */
@property (nonatomic) NSString *BlockValue;

/**
Google Smart Tap Push Service.
 */
@property (nonatomic,strong) GoogleSmartTapPushService *GoogleSmartTapPushServiceData;


/**
 Apple Pay VAS  specific data.
 */
@property (nonatomic,strong) ApplePayVAS *ApplePayVASData;


/**
 Google Smart Tap specific data.
 */
@property (nonatomic,strong) GoogleSmartTap *GoogleSmartTapData;

@property (nonatomic) NSString *UpdateBlockNo;


-(int)pack:(NSArray**)packOutBuffer;

/**
 * parse the String command type to integer type.
 * @param type could be "INIT","GETVAR","SETVAR","SHOWDIALOG","GETSIGNATURE","SHOWMESSAGE","CLEARMESSAGE","RESET","UPDATEIMAGE","DOSIGNATURE","DELETEIMAGE","REBOOT","GETPINBLOCK","INPUTACCOUNT","RESETMSR","INPUTTEXT","CHECKFILE","AUTHORIZECARD","COMPLETEONLINEEMV","INPUTACCOUNTWITHEMV",@"SHOWDIALOGFORM"
 * @return an integer identify the TransType, or -1 if parse error.
 */
+(int) ParseTransType:(NSString*)type;

/**
 * parse the String EDC type to integer type.
 * @param type could be "ALL","CREDIT","DEBIT","CHECK","EBT","GIFT","LOYALTY","CASH"
 * @return an integer identify the EDC Type, or -1 if parse error.
 */
+(int)ParseEDCType:(NSString*)type;


/**
 * parse the String transaction type to integer type.
 * @param type could be "UNKNOWN",
 "AUTH",
 "SALE",
 "RETURN",
 "VOID",
 "POSTAUTH",
 "FORCEAUTH",
 "CAPTURE",
 "REPEATSALE",
 "CAPTUREALL",
 "ADJUST",
 "INQUIRY",
 "ACTIVATE",
 "DEACTIVATE",
 "RELOAD",
 "VOID SALE",
 "VOID RETURN",
 "VOID AUTH",
 "VOID POSTAUTH",
 "VOID FORCEAUTH",
 "VOID WITHDRAWAL",
 "REVERSAL",
 "WITHDRAWAL",
 "ISSUE",
 "CASHOUT",
 "REPLACE",
 "MERGE",
 "REPORTLOST",
 "REDEEM",
 "STATUS_CHECK",
 "SETUP",
 "INIT",
 "VERIFY"
 "REACTIVATE"
 "FORCED ISSUE"
 "FORCED ADD"
 "UNLOAD"
 "RENEW"
 "TOKENIZE"
 * @return an integer identify the transaction Type, or -1 if parse error.
 */
+(int) ParseTrans:(NSString*)type;

/**
 The file path taken to save a signature received from the POS.
 When set,the file will save to a specifick destination folder,if not set it will save to default filder which is Document\SigFilePath\.
 Only valid when TransType = GETSIGNATURE.
 */
@property (nonatomic) NSString *saveSigPath;


/**
 Reserve.
 Must set to 1 (Terminal Master Key).
 */
@property (nonatomic) NSString *SourceKeyType;

/**
 The source key index should be [1, 99].
 */
@property (nonatomic) NSString *SourceKeyIndex;

/**
 TPK(Terminal PIN Key) = 0;
 TAK(Terminal MAC Key) =1;
 TDK(Terminal DES Key) = 2;
 */
@property (nonatomic) NSString *DestinationKeyType;

/**
 The destination key is the cipher text which encrypted by the source key in the mode of DES/TDES ECB.
 Valid key length is 8, 16, 24.
 Please note the data should be converted into ASCII format.
 */
@property (nonatomic) NSString *DestinationKeyValue;

/**
 The destination key index should be [1, 99].
 */
@property (nonatomic) NSString *DestinationKeyIndex;

/**
 Check Mode:
 0: No KCV check.
 1: Perform DES/TDES encryption on 8 bytes 0x00, and use first 4 bytes as KCV.
 */
@property (nonatomic) NSString *CheckMode;


/**
 If check mode = 0, PED won’t check KCV.
 If check mode = 1, the KCV length should be 4 bytes.
 Please note the data should be converted into ASCII format
 
 */
@property (nonatomic) NSString *CheckBuffer;

/**
 The data used for MAC Calculation.
 The data can be divided into several parts by vertical bar (‘|’). Use ‘Encryption Bitmap’ to indicate which parts is encrypted.
 Terminal will remove the vertical bars (‘|’) and decrypt the cipher text, then MAC will be calculated using the decrypted data.
 The data is represented in hexadecimal. For example: 3031|4a4b|6061.
 
 */
@property (nonatomic) NSString *InputData;

/**
 Indicate which parts of input data are encrypted.
 0: Plaintext
 1: Ciphertext
 For example: if input data contain 5 parts. 00101 means the third and the fifth part are ciphertext.
 Default is 0, means this part is plaintext.

 */
@property (nonatomic) NSString *EncryptionBitmap;

/**
 Separator
 Key Index of TAK in PED: range is [1, 99].

 */
@property (nonatomic) NSString *MACKeySlot;

/**
 MAC calculation mode:
 Default is 0.
 0: ANSI X9.9.
 1: Hypercom Fast Mode.
 2: ANSI X9.19.

 */
@property (nonatomic) NSString *MACWorkMode;

/**
 The key slot used to encrypt input data parts.
 */
@property (nonatomic) NSString *EncryptionKeySlot;

/**
 The type of the key which is used to calculate MAC value.
 Default MAC key type is 0(TAK)
 0: TAK
 1: DUKPT key
 */
@property (nonatomic) NSString *MACKeyType;

/**
 Indicate whether to increase KSN, when MAC key type is 1(DUKPT Key)
 Default KSN flag is 0(Not increase)
 */
@property (nonatomic) NSString *KSNFlag;

/**
 Whether fallback insert is allowed after reading contactless card failed. Default as 0.
 0 for not allowed.
 1 for allowed.
 */
@property (nonatomic) NSString *FallbackInsertEntryFlag;

/**
 Configure the limit value of contactless CVM for current transaction. (Only for Visa payWave)
 Only valid when TransType = INPUTACCOUNTWITHEMV
 */
@property (nonatomic) NSString *TransactionCVMLimit;

/**
 Empty value means all key information.
 If you want to specify Key Slot, you need to specify key type first.
 Only valid when TransType = GETPEDINFORMATION.1 = Master Key.2 = Session Key.3 = DES DUKPT Key
 */
@property (nonatomic,copy) NSString *KeyType;

/**
 Enable Luhn Check.
 0 Default. Disable Luhn checking(for manual and swipe only)
 1 Enable Luhn checking(for manual and swipe)
 Only valid when TransType = INPUTACCOUNTWITHEMV.
 */
@property (nonatomic) NSString *EnableLuhnCheck;

/**
 * Save signature data.
 * @param trace: sigData;
 * @param trace: sigData;
 */
-(void)saveSigData:(NSString *)trace;
#if TARGET_OS_IOS
/**
 * Convert signature data to picture.
 * @param trace: sigData;
 * @return a picture.
 */
+(UIImage *)convertSigToPic:(NSData *)sigdata;

/**
 * save sig image.
 * @param image: sig image;
 * @param sigPath: sig image file path;
 * @param type: sig image file type;
 * @param out: sig image file name;
 */
-(void)saveSigToPic:(UIImage *)image sigPath:(NSString *)sigPath type:(NSString *)type outFile:(NSString *)outFile;
#else
+(NSImage *)convertSigToPic:(NSData *)sigdata;
-(BOOL)saveSigToPic:(NSImage *)image sigPath:(NSString *)sigPath type:(NSString *)type outFile:(NSString *)outFile;
#endif
@end



