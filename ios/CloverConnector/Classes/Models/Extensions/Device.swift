
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import ObjectMapper

extension CLVModels {
  public class Device {
    
    
    public enum BuildType: String {
      case ENG
      case USER
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels6Device6Device)public class Device: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Name of the device (if entered)
      public var name: String?
      public var model: String?
      public var orderPrefix: String?
      public var terminalPrefix: Int?
      public var serial: String?
      public var buildNumber: Int?
      public var secureId: String?
      public var buildType: CLVModels.Device.BuildType? = nil
      public var cpuId: String?
      /// The IMEI of the device
      public var imei: String?
      /// The IMSI of the SIM in the device (if present)
      public var imsi: String?
      /// The ICCID of the SIM in the device (if present)
      public var simIccid: String?
      public var deviceCertificate: String?
      public var pedCertificate: String?
      public var deviceTypeName: String?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(model, forKey: "model")
        aCoder.encode(orderPrefix, forKey: "orderPrefix")
        aCoder.encode(terminalPrefix, forKey: "terminalPrefix")
        aCoder.encode(serial, forKey: "serial")
        aCoder.encode(buildNumber, forKey: "buildNumber")
        aCoder.encode(secureId, forKey: "secureId")
        aCoder.encode(buildType?.rawValue, forKey: "buildType")
        aCoder.encode(cpuId, forKey: "cpuId")
        aCoder.encode(imei, forKey: "imei")
        aCoder.encode(imsi, forKey: "imsi")
        aCoder.encode(simIccid, forKey: "simIccid")
        aCoder.encode(deviceCertificate, forKey: "deviceCertificate")
        aCoder.encode(pedCertificate, forKey: "pedCertificate")
        aCoder.encode(deviceTypeName, forKey: "deviceTypeName")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        model = aDecoder.decodeObject(forKey: "model") as? String
        orderPrefix = aDecoder.decodeObject(forKey: "orderPrefix") as? String
        terminalPrefix = aDecoder.decodeObject(forKey: "terminalPrefix") as? Int
        serial = aDecoder.decodeObject(forKey: "serial") as? String
        buildNumber = aDecoder.decodeObject(forKey: "buildNumber") as? Int
        secureId = aDecoder.decodeObject(forKey: "secureId") as? String
        if let buildTypeString = (aDecoder.decodeObject(forKey: "buildType") as? String) {
            buildType = CLVModels.Device.BuildType(rawValue: buildTypeString)
        }
        cpuId = aDecoder.decodeObject(forKey: "cpuId") as? String
        imei = aDecoder.decodeObject(forKey: "imei") as? String
        imsi = aDecoder.decodeObject(forKey: "imsi") as? String
        simIccid = aDecoder.decodeObject(forKey: "simIccid") as? String
        deviceCertificate = aDecoder.decodeObject(forKey: "deviceCertificate") as? String
        pedCertificate = aDecoder.decodeObject(forKey: "pedCertificate") as? String
        deviceTypeName = aDecoder.decodeObject(forKey: "deviceTypeName") as? String
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        model <- map["model"]
        orderPrefix <- map["orderPrefix"]
        terminalPrefix <- map["terminalPrefix"]
        serial <- map["serial"]
        buildNumber <- map["buildNumber"]
        secureId <- map["secureId"]
        buildType <- map["buildType"]
        cpuId <- map["cpuId"]
        imei <- map["imei"]
        imsi <- map["imsi"]
        simIccid <- map["simIccid"]
        deviceCertificate <- map["deviceCertificate"]
        pedCertificate <- map["pedCertificate"]
        deviceTypeName <- map["deviceTypeName"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels6Device15DeviceProvision)public class DeviceProvision: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      public var deviceRef: CLVModels.Device.Device?
      public var state: CLVModels.Device.DeviceProvisionState? = nil
      public var lastActivationCode: String?
      public var activationCode: String?
      public var emailSent: Bool?
      public var hasShipment: Bool?
      public var serialNumber: String?
      public var merchant: CLVModels.Merchant.Merchant?
      public var deviceType: String?
      public var provisionedTime: Date?
      public var activatedTime: Date?
      public var reseller: CLVModels.Base.Reference?
      public var currentRom: CLVModels.Device.Rom?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(deviceRef, forKey: "deviceRef")
        aCoder.encode(state?.rawValue, forKey: "state")
        aCoder.encode(lastActivationCode, forKey: "lastActivationCode")
        aCoder.encode(activationCode, forKey: "activationCode")
        aCoder.encode(emailSent, forKey: "emailSent")
        aCoder.encode(hasShipment, forKey: "hasShipment")
        aCoder.encode(serialNumber, forKey: "serialNumber")
        aCoder.encode(merchant, forKey: "merchant")
        aCoder.encode(deviceType, forKey: "deviceType")
        aCoder.encode(provisionedTime, forKey: "provisionedTime")
        aCoder.encode(activatedTime, forKey: "activatedTime")
        aCoder.encode(reseller, forKey: "reseller")
        aCoder.encode(currentRom, forKey: "currentRom")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        deviceRef = aDecoder.decodeObject(forKey: "deviceRef") as? CLVModels.Device.Device
        if let stateString = (aDecoder.decodeObject(forKey: "state") as? String) {
            state = CLVModels.Device.DeviceProvisionState(rawValue: stateString)
        }
        lastActivationCode = aDecoder.decodeObject(forKey: "lastActivationCode") as? String
        activationCode = aDecoder.decodeObject(forKey: "activationCode") as? String
        emailSent = aDecoder.decodeObject(forKey: "emailSent") as? Bool
        hasShipment = aDecoder.decodeObject(forKey: "hasShipment") as? Bool
        serialNumber = aDecoder.decodeObject(forKey: "serialNumber") as? String
        merchant = aDecoder.decodeObject(forKey: "merchant") as? CLVModels.Merchant.Merchant
        deviceType = aDecoder.decodeObject(forKey: "deviceType") as? String
        provisionedTime = aDecoder.decodeObject(forKey: "provisionedTime") as? Date
        activatedTime = aDecoder.decodeObject(forKey: "activatedTime") as? Date
        reseller = aDecoder.decodeObject(forKey: "reseller") as? CLVModels.Base.Reference
        currentRom = aDecoder.decodeObject(forKey: "currentRom") as? CLVModels.Device.Rom
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        deviceRef <- map["deviceRef"]
        state <- map["state"]
        lastActivationCode <- map["lastActivationCode"]
        activationCode <- map["activationCode"]
        emailSent <- map["emailSent"]
        hasShipment <- map["hasShipment"]
        serialNumber <- map["serialNumber"]
        merchant <- map["merchant"]
        deviceType <- map["deviceType"]
        provisionedTime <- (map["provisionedTime"], CLVDateTransform())
        activatedTime <- (map["activatedTime"], CLVDateTransform())
        reseller <- map["reseller"]
        currentRom <- map["currentRom"]
      }
    }
    
    
    
    public enum DeviceProvisionState: String {
      case NOT_ASSOCIATED
      case DISASSOCIATED
      case ASSOCIATED
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels6Device3Rom)public class Rom: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// When the ROM was created
      public var createdAt: Int?
      public var version_: Int?
      public var versionName: String?
      public var description_: String?
      public var buildType: CLVModels.Device.RomBuildType? = nil
      public var isCritical: Bool?
      public var published: Bool?
      public var enabled: Bool?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(createdAt, forKey: "createdAt")
        aCoder.encode(version_, forKey: "version_")
        aCoder.encode(versionName, forKey: "versionName")
        aCoder.encode(description_, forKey: "description_")
        aCoder.encode(buildType?.rawValue, forKey: "buildType")
        aCoder.encode(isCritical, forKey: "isCritical")
        aCoder.encode(published, forKey: "published")
        aCoder.encode(enabled, forKey: "enabled")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        createdAt = aDecoder.decodeObject(forKey: "createdAt") as? Int
        version_ = aDecoder.decodeObject(forKey: "version_") as? Int
        versionName = aDecoder.decodeObject(forKey: "versionName") as? String
        description_ = aDecoder.decodeObject(forKey: "description_") as? String
        if let buildTypeString = (aDecoder.decodeObject(forKey: "buildType") as? String) {
            buildType = CLVModels.Device.RomBuildType(rawValue: buildTypeString)
        }
        isCritical = aDecoder.decodeObject(forKey: "isCritical") as? Bool
        published = aDecoder.decodeObject(forKey: "published") as? Bool
        enabled = aDecoder.decodeObject(forKey: "enabled") as? Bool
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        createdAt <- map["createdAt"]
        version_ <- map["version"]
        versionName <- map["versionName"]
        description_ <- map["description"]
        buildType <- map["buildType"]
        isCritical <- map["isCritical"]
        published <- map["published"]
        enabled <- map["enabled"]
      }
    }
    
    
    
    public enum RomBuildType: String {
      case ENG
      case USER
    }
    
  }
}
