
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import ObjectMapper

extension CLVModels {
  public class Order {
    
    
    public enum CustomerIdMethod: String {
      case NAME
      case TABLE
      case NAME_TABLE
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels5Order8Discount)public class Discount: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// The order with which the discount is associated
      public var orderRef: CLVModels.Order.Order?
      /// The lineItem with which the discount is associated
      public var lineItemRef: CLVModels.Order.LineItem?
      /// If this item is based on a standard discount, this will point to the appropriate inventory.Discount
      public var discount: CLVModels.Inventory.Discount?
      /// Name of the discount
      public var name: String?
      /// Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
      public var amount: Int?
      /// Discount amount in percent
      public var percentage: Int?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(orderRef, forKey: "orderRef")
        aCoder.encode(lineItemRef, forKey: "lineItemRef")
        aCoder.encode(discount, forKey: "discount")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(amount, forKey: "amount")
        aCoder.encode(percentage, forKey: "percentage")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        orderRef = aDecoder.decodeObject(forKey: "orderRef") as? CLVModels.Order.Order
        lineItemRef = aDecoder.decodeObject(forKey: "lineItemRef") as? CLVModels.Order.LineItem
        discount = aDecoder.decodeObject(forKey: "discount") as? CLVModels.Inventory.Discount
        name = aDecoder.decodeObject(forKey: "name") as? String
        amount = aDecoder.decodeObject(forKey: "amount") as? Int
        percentage = aDecoder.decodeObject(forKey: "percentage") as? Int
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        orderRef <- map["orderRef"]
        lineItemRef <- map["lineItemRef"]
        discount <- map["discount"]
        name <- map["name"]
        amount <- map["amount"]
        percentage <- map["percentage"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels5Order9FireOrder)public class FireOrder: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// The id of the order to fire.
      public var orderId: String?
      /// How long in seconds to wait before calling fire.
      public var delay: Int?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(orderId, forKey: "orderId")
        aCoder.encode(delay, forKey: "delay")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        orderId = aDecoder.decodeObject(forKey: "orderId") as? String
        delay = aDecoder.decodeObject(forKey: "delay") as? Int
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        orderId <- map["orderId"]
        delay <- map["delay"]
      }
    }
    
    
    
    public enum HoursAvailable: String {
      case ALL
      case BUSINESS
      case CUSTOM
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels5Order8LineItem)public class LineItem: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// The order with which the line item is associated
      public var orderRef: CLVModels.Order.Order?
      /// Inventory item used to create this line item
      public var item: CLVModels.Inventory.Item?
      /// Line item name
      public var name: String?
      /// Alternate name of the line item
      public var alternateName: String?
      /// Price of the item, typically in cents; use priceType and merchant currency to determine actual item price
      public var price: Int?
      /// Unit quantity
      public var unitQty: Int?
      /// Unit name (e.g. oz, lb, etc.)
      public var unitName: String?
      public var itemCode: String?
      public var note: String?
      public var printed: Bool?
      public var exchangedLineItem: CLVModels.Order.LineItem?
      public var binName: String?
      public var userData: String?
      public var createdTime: Date?
      public var orderClientCreatedTime: Date?
      public var discounts: [CLVModels.Order.Discount]?
      /// does the calculated flag actually do anything?
      public var discountAmount: Int?
      public var exchanged: Bool?
      public var modifications: [CLVModels.Order.Modification]?
      public var refunded: Bool?
      /// True if this item should be counted as revenue, for example gift cards and donations would not
      public var isRevenue: Bool?
      public var taxRates: [CLVModels.Inventory.TaxRate]?
      /// Payments that were made for this line item
      public var payments: [CLVModels.Payments.LineItemPayment]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(orderRef, forKey: "orderRef")
        aCoder.encode(item, forKey: "item")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(alternateName, forKey: "alternateName")
        aCoder.encode(price, forKey: "price")
        aCoder.encode(unitQty, forKey: "unitQty")
        aCoder.encode(unitName, forKey: "unitName")
        aCoder.encode(itemCode, forKey: "itemCode")
        aCoder.encode(note, forKey: "note")
        aCoder.encode(printed, forKey: "printed")
        aCoder.encode(exchangedLineItem, forKey: "exchangedLineItem")
        aCoder.encode(binName, forKey: "binName")
        aCoder.encode(userData, forKey: "userData")
        aCoder.encode(createdTime, forKey: "createdTime")
        aCoder.encode(orderClientCreatedTime, forKey: "orderClientCreatedTime")
        aCoder.encode(discounts, forKey: "discounts")
        aCoder.encode(discountAmount, forKey: "discountAmount")
        aCoder.encode(exchanged, forKey: "exchanged")
        aCoder.encode(modifications, forKey: "modifications")
        aCoder.encode(refunded, forKey: "refunded")
        aCoder.encode(isRevenue, forKey: "isRevenue")
        aCoder.encode(taxRates, forKey: "taxRates")
        aCoder.encode(payments, forKey: "payments")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        orderRef = aDecoder.decodeObject(forKey: "orderRef") as? CLVModels.Order.Order
        item = aDecoder.decodeObject(forKey: "item") as? CLVModels.Inventory.Item
        name = aDecoder.decodeObject(forKey: "name") as? String
        alternateName = aDecoder.decodeObject(forKey: "alternateName") as? String
        price = aDecoder.decodeObject(forKey: "price") as? Int
        unitQty = aDecoder.decodeObject(forKey: "unitQty") as? Int
        unitName = aDecoder.decodeObject(forKey: "unitName") as? String
        itemCode = aDecoder.decodeObject(forKey: "itemCode") as? String
        note = aDecoder.decodeObject(forKey: "note") as? String
        printed = aDecoder.decodeObject(forKey: "printed") as? Bool
        exchangedLineItem = aDecoder.decodeObject(forKey: "exchangedLineItem") as? CLVModels.Order.LineItem
        binName = aDecoder.decodeObject(forKey: "binName") as? String
        userData = aDecoder.decodeObject(forKey: "userData") as? String
        createdTime = aDecoder.decodeObject(forKey: "createdTime") as? Date
        orderClientCreatedTime = aDecoder.decodeObject(forKey: "orderClientCreatedTime") as? Date
        discounts = aDecoder.decodeObject(forKey: "discounts") as? [CLVModels.Order.Discount]
        discountAmount = aDecoder.decodeObject(forKey: "discountAmount") as? Int
        exchanged = aDecoder.decodeObject(forKey: "exchanged") as? Bool
        modifications = aDecoder.decodeObject(forKey: "modifications") as? [CLVModels.Order.Modification]
        refunded = aDecoder.decodeObject(forKey: "refunded") as? Bool
        isRevenue = aDecoder.decodeObject(forKey: "isRevenue") as? Bool
        taxRates = aDecoder.decodeObject(forKey: "taxRates") as? [CLVModels.Inventory.TaxRate]
        payments = aDecoder.decodeObject(forKey: "payments") as? [CLVModels.Payments.LineItemPayment]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        orderRef <- map["orderRef"]
        item <- map["item"]
        name <- map["name"]
        alternateName <- map["alternateName"]
        price <- map["price"]
        unitQty <- map["unitQty"]
        unitName <- map["unitName"]
        itemCode <- map["itemCode"]
        note <- map["note"]
        printed <- map["printed"]
        exchangedLineItem <- map["exchangedLineItem"]
        binName <- map["binName"]
        userData <- map["userData"]
        createdTime <- (map["createdTime"], CLVDateTransform())
        orderClientCreatedTime <- (map["orderClientCreatedTime"], CLVDateTransform())
        discounts <- map["discounts.elements"]
        discountAmount <- map["discountAmount"]
        exchanged <- map["exchanged"]
        modifications <- map["modifications.elements"]
        refunded <- map["refunded"]
        isRevenue <- map["isRevenue"]
        taxRates <- map["taxRates.elements"]
        payments <- map["payments.elements"]
      }
    }
    
    
    
    /// Snapshot of a line item modifier at the time that the order was placed.
    @objc(_TtCCC15CloverConnector9CLVModels5Order12Modification)public class Modification: NSObject, NSCoding, Mappable {
      public var id: String?
      /// The line item with which the modification is associated
      public var lineItemRef: CLVModels.Order.LineItem?
      public var name: String?
      public var alternateName: String?
      public var amount: Int?
      /// The modifier object.  Values from the Modifier are copied to the Modification at the time that the order is placed.  Modifier values may change after the order is placed.
      public var modifier: CLVModels.Inventory.Modifier?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(lineItemRef, forKey: "lineItemRef")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(alternateName, forKey: "alternateName")
        aCoder.encode(amount, forKey: "amount")
        aCoder.encode(modifier, forKey: "modifier")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        lineItemRef = aDecoder.decodeObject(forKey: "lineItemRef") as? CLVModels.Order.LineItem
        name = aDecoder.decodeObject(forKey: "name") as? String
        alternateName = aDecoder.decodeObject(forKey: "alternateName") as? String
        amount = aDecoder.decodeObject(forKey: "amount") as? Int
        modifier = aDecoder.decodeObject(forKey: "modifier") as? CLVModels.Inventory.Modifier
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        lineItemRef <- map["lineItemRef"]
        name <- map["name"]
        alternateName <- map["alternateName"]
        amount <- map["amount"]
        modifier <- map["modifier"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels5Order5Order)public class Order: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Currency of this order
      public var currency: String?
      public var customers: [CLVModels.Customers.Customer]?
      /// The employee who took this order
      public var employee: CLVModels.Employees.Employee?
      /// Total price of the order
      public var total: Int?
      public var title: String?
      public var note: String?
      public var orderType: CLVModels.Order.OrderType?
      public var taxRemoved: Bool?
      public var isVat: Bool?
      public var state: String?
      public var manualTransaction: Bool?
      public var groupLineItems: Bool?
      public var testMode: Bool?
      public var payType: CLVModels.Order.PayType? = nil
      /// Creation timestamp
      public var createdTime: Date?
      public var clientCreatedTime: Date?
      /// Last modified time of the order
      public var modifiedTime: Date?
      public var deletedTimestamp: Date?
      /// Optional service charge (gratuity) applied to this order
      public var serviceCharge: CLVModels.Base.ServiceCharge?
      public var discounts: [CLVModels.Order.Discount]?
      public var lineItems: [CLVModels.Order.LineItem]?
      public var taxRates: [CLVModels.Order.OrderTaxRate]?
      /// Payments that were made for this order
      public var payments: [CLVModels.Payments.Payment]?
      /// Refunds that were made for this order
      public var refunds: [CLVModels.Payments.Refund]?
      public var credits: [CLVModels.Payments.Credit]?
      /// Voided payments associated with this order
      public var voids: [CLVModels.Payments.Payment]?
      /// Device which created the order
      public var device: CLVModels.Device.Device?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(currency, forKey: "currency")
        aCoder.encode(customers, forKey: "customers")
        aCoder.encode(employee, forKey: "employee")
        aCoder.encode(total, forKey: "total")
        aCoder.encode(title, forKey: "title")
        aCoder.encode(note, forKey: "note")
        aCoder.encode(orderType, forKey: "orderType")
        aCoder.encode(taxRemoved, forKey: "taxRemoved")
        aCoder.encode(isVat, forKey: "isVat")
        aCoder.encode(state, forKey: "state")
        aCoder.encode(manualTransaction, forKey: "manualTransaction")
        aCoder.encode(groupLineItems, forKey: "groupLineItems")
        aCoder.encode(testMode, forKey: "testMode")
        aCoder.encode(payType?.rawValue, forKey: "payType")
        aCoder.encode(createdTime, forKey: "createdTime")
        aCoder.encode(clientCreatedTime, forKey: "clientCreatedTime")
        aCoder.encode(modifiedTime, forKey: "modifiedTime")
        aCoder.encode(deletedTimestamp, forKey: "deletedTimestamp")
        aCoder.encode(serviceCharge, forKey: "serviceCharge")
        aCoder.encode(discounts, forKey: "discounts")
        aCoder.encode(lineItems, forKey: "lineItems")
        aCoder.encode(taxRates, forKey: "taxRates")
        aCoder.encode(payments, forKey: "payments")
        aCoder.encode(refunds, forKey: "refunds")
        aCoder.encode(credits, forKey: "credits")
        aCoder.encode(voids, forKey: "voids")
        aCoder.encode(device, forKey: "device")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        currency = aDecoder.decodeObject(forKey: "currency") as? String
        customers = aDecoder.decodeObject(forKey: "customers") as? [CLVModels.Customers.Customer]
        employee = aDecoder.decodeObject(forKey: "employee") as? CLVModels.Employees.Employee
        total = aDecoder.decodeObject(forKey: "total") as? Int
        title = aDecoder.decodeObject(forKey: "title") as? String
        note = aDecoder.decodeObject(forKey: "note") as? String
        orderType = aDecoder.decodeObject(forKey: "orderType") as? CLVModels.Order.OrderType
        taxRemoved = aDecoder.decodeObject(forKey: "taxRemoved") as? Bool
        isVat = aDecoder.decodeObject(forKey: "isVat") as? Bool
        state = aDecoder.decodeObject(forKey: "state") as? String
        manualTransaction = aDecoder.decodeObject(forKey: "manualTransaction") as? Bool
        groupLineItems = aDecoder.decodeObject(forKey: "groupLineItems") as? Bool
        testMode = aDecoder.decodeObject(forKey: "testMode") as? Bool
        if let payTypeString = (aDecoder.decodeObject(forKey: "payType") as? String) {
            payType = CLVModels.Order.PayType(rawValue: payTypeString)
        }
        createdTime = aDecoder.decodeObject(forKey: "createdTime") as? Date
        clientCreatedTime = aDecoder.decodeObject(forKey: "clientCreatedTime") as? Date
        modifiedTime = aDecoder.decodeObject(forKey: "modifiedTime") as? Date
        deletedTimestamp = aDecoder.decodeObject(forKey: "deletedTimestamp") as? Date
        serviceCharge = aDecoder.decodeObject(forKey: "serviceCharge") as? CLVModels.Base.ServiceCharge
        discounts = aDecoder.decodeObject(forKey: "discounts") as? [CLVModels.Order.Discount]
        lineItems = aDecoder.decodeObject(forKey: "lineItems") as? [CLVModels.Order.LineItem]
        taxRates = aDecoder.decodeObject(forKey: "taxRates") as? [CLVModels.Order.OrderTaxRate]
        payments = aDecoder.decodeObject(forKey: "payments") as? [CLVModels.Payments.Payment]
        refunds = aDecoder.decodeObject(forKey: "refunds") as? [CLVModels.Payments.Refund]
        credits = aDecoder.decodeObject(forKey: "credits") as? [CLVModels.Payments.Credit]
        voids = aDecoder.decodeObject(forKey: "voids") as? [CLVModels.Payments.Payment]
        device = aDecoder.decodeObject(forKey: "device") as? CLVModels.Device.Device
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        currency <- map["currency"]
        customers <- map["customers.elements"]
        employee <- map["employee"]
        total <- map["total"]
        title <- map["title"]
        note <- map["note"]
        orderType <- map["orderType"]
        taxRemoved <- map["taxRemoved"]
        isVat <- map["isVat"]
        state <- map["state"]
        manualTransaction <- map["manualTransaction"]
        groupLineItems <- map["groupLineItems"]
        testMode <- map["testMode"]
        payType <- map["payType"]
        createdTime <- (map["createdTime"], CLVDateTransform())
        clientCreatedTime <- (map["clientCreatedTime"], CLVDateTransform())
        modifiedTime <- (map["modifiedTime"], CLVDateTransform())
        deletedTimestamp <- (map["deletedTimestamp"], CLVDateTransform())
        serviceCharge <- map["serviceCharge"]
        discounts <- map["discounts.elements"]
        lineItems <- map["lineItems.elements"]
        taxRates <- map["taxRates.elements"]
        payments <- map["payments.elements"]
        refunds <- map["refunds.elements"]
        credits <- map["credits.elements"]
        voids <- map["voids.elements"]
        device <- map["device"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels5Order12OrderTaxRate)public class OrderTaxRate: NSObject, NSCoding, Mappable {
      public var id: String?
      public var name: String?
      public var amount: Int?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(amount, forKey: "amount")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        amount = aDecoder.decodeObject(forKey: "amount") as? Int
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        amount <- map["amount"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels5Order9OrderType)public class OrderType: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Label Key
      public var labelKey: String?
      /// Label Key
      public var label: String?
      /// If this order type is taxable
      public var taxable: Bool?
      /// If this order type is the default
      public var isDefault: Bool?
      /// If set to false, then this order type includes all of the merchant's categories. Otherwise, it only contains the categories defined in the "categories" field on this object.
      public var filterCategories: Bool?
      /// If this order type is hidden on the register
      public var isHidden: Bool?
      /// The price of a fee added to this order type
      public var fee: Int?
      /// The minimum amount required for an order to be placed
      public var minOrderAmount: Int?
      /// The maximum amount for an order allowed
      public var maxOrderAmount: Int?
      /// The maximum radius allowed for an order (i.e. delivery)
      public var maxRadius: Int?
      /// The average time it takes to complete the order
      public var avgOrderTime: Int?
      public var hoursAvailable: CLVModels.Order.HoursAvailable? = nil
      public var customerIdMethod: CLVModels.Order.CustomerIdMethod? = nil
      /// If this order type is deleted
      public var isDeleted: Bool?
      /// Optional system order type that this order type is associated with.
      public var systemOrderTypeId: String?
      /// The hours this order type is available (if they differ from normal merchant hours)
      public var hours: CLVModels.Hours.HoursSet?
      /// The categories of items that can be assigned to this order type
      public var categories: [CLVModels.Inventory.Category]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(labelKey, forKey: "labelKey")
        aCoder.encode(label, forKey: "label")
        aCoder.encode(taxable, forKey: "taxable")
        aCoder.encode(isDefault, forKey: "isDefault")
        aCoder.encode(filterCategories, forKey: "filterCategories")
        aCoder.encode(isHidden, forKey: "isHidden")
        aCoder.encode(fee, forKey: "fee")
        aCoder.encode(minOrderAmount, forKey: "minOrderAmount")
        aCoder.encode(maxOrderAmount, forKey: "maxOrderAmount")
        aCoder.encode(maxRadius, forKey: "maxRadius")
        aCoder.encode(avgOrderTime, forKey: "avgOrderTime")
        aCoder.encode(hoursAvailable?.rawValue, forKey: "hoursAvailable")
        aCoder.encode(customerIdMethod?.rawValue, forKey: "customerIdMethod")
        aCoder.encode(isDeleted, forKey: "isDeleted")
        aCoder.encode(systemOrderTypeId, forKey: "systemOrderTypeId")
        aCoder.encode(hours, forKey: "hours")
        aCoder.encode(categories, forKey: "categories")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        labelKey = aDecoder.decodeObject(forKey: "labelKey") as? String
        label = aDecoder.decodeObject(forKey: "label") as? String
        taxable = aDecoder.decodeObject(forKey: "taxable") as? Bool
        isDefault = aDecoder.decodeObject(forKey: "isDefault") as? Bool
        filterCategories = aDecoder.decodeObject(forKey: "filterCategories") as? Bool
        isHidden = aDecoder.decodeObject(forKey: "isHidden") as? Bool
        fee = aDecoder.decodeObject(forKey: "fee") as? Int
        minOrderAmount = aDecoder.decodeObject(forKey: "minOrderAmount") as? Int
        maxOrderAmount = aDecoder.decodeObject(forKey: "maxOrderAmount") as? Int
        maxRadius = aDecoder.decodeObject(forKey: "maxRadius") as? Int
        avgOrderTime = aDecoder.decodeObject(forKey: "avgOrderTime") as? Int
        if let hoursAvailableString = aDecoder.decodeObject(forKey: "hoursAvailable") as? String {
            hoursAvailable = CLVModels.Order.HoursAvailable(rawValue: hoursAvailableString)
        }
        if let customerIdMethodString = aDecoder.decodeObject(forKey: "customerIdMethod") as? String {
            customerIdMethod = CLVModels.Order.CustomerIdMethod(rawValue: customerIdMethodString)
        }
        isDeleted = aDecoder.decodeObject(forKey: "isDeleted") as? Bool
        systemOrderTypeId = aDecoder.decodeObject(forKey: "systemOrderTypeId") as? String
        hours = aDecoder.decodeObject(forKey: "hours") as? CLVModels.Hours.HoursSet
        categories = aDecoder.decodeObject(forKey: "categories") as? [CLVModels.Inventory.Category]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        labelKey <- map["labelKey"]
        label <- map["label"]
        taxable <- map["taxable"]
        isDefault <- map["isDefault"]
        filterCategories <- map["filterCategories"]
        isHidden <- map["isHidden"]
        fee <- map["fee"]
        minOrderAmount <- map["minOrderAmount"]
        maxOrderAmount <- map["maxOrderAmount"]
        maxRadius <- map["maxRadius"]
        avgOrderTime <- map["avgOrderTime"]
        hoursAvailable <- map["hoursAvailable"]
        customerIdMethod <- map["customerIdMethod"]
        isDeleted <- map["isDeleted"]
        systemOrderTypeId <- map["systemOrderTypeId"]
        hours <- map["hours"]
        categories <- map["categories.elements"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels5Order17OrderTypeCategory)public class OrderTypeCategory: NSObject, NSCoding, Mappable {
      public var orderType: CLVModels.Order.OrderType?
      public var category: CLVModels.Inventory.Category?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(orderType, forKey: "orderType")
        aCoder.encode(category, forKey: "category")
      }
      
      required public init(coder aDecoder: NSCoder) {
        orderType = aDecoder.decodeObject(forKey: "orderType") as? CLVModels.Order.OrderType
        category = aDecoder.decodeObject(forKey: "category") as? CLVModels.Inventory.Category
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        orderType <- map["orderType"]
        category <- map["category"]
      }
    }
    
    
    
    public enum PayType: String {
      case SPLIT_GUEST
      case SPLIT_ITEM
      case SPLIT_CUSTOM
      case FULL
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels5Order15SystemOrderType)public class SystemOrderType: NSObject, NSCoding, Mappable {
      /// Unqiue identifier
      public var id: String?
      /// Label Key
      public var labelKey: String?
      /// Is for quick service restraunts?
      public var isQsr: Bool?
      /// Is for full service restraunts?
      public var isFsr: Bool?
      /// Is for retail stores?
      public var isRetail: Bool?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(labelKey, forKey: "labelKey")
        aCoder.encode(isQsr, forKey: "isQsr")
        aCoder.encode(isFsr, forKey: "isFsr")
        aCoder.encode(isRetail, forKey: "isRetail")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        labelKey = aDecoder.decodeObject(forKey: "labelKey") as? String
        isQsr = aDecoder.decodeObject(forKey: "isQsr") as? Bool
        isFsr = aDecoder.decodeObject(forKey: "isFsr") as? Bool
        isRetail = aDecoder.decodeObject(forKey: "isRetail") as? Bool
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        labelKey <- map["labelKey"]
        isQsr <- map["isQsr"]
        isFsr <- map["isFsr"]
        isRetail <- map["isRetail"]
      }
    }
    
    
    
    /// Symbols beginning with USER_ or REJECT_ are user-initiated.  Others are client- or server-initiated.
    public enum VoidReason: String {
      case USER_CANCEL
      case TRANSPORT_ERROR
      case REJECT_SIGNATURE
      case REJECT_PARTIAL_AUTH
      case NOT_APPROVED
      case FAILED
      case AUTH_CLOSED_NEW_CARD
      case DEVELOPER_PAY_PARTIAL_AUTH
      case REJECT_DUPLICATE
    }
    
  }
}
