
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import ObjectMapper

extension CLVModels {
  public class Account {
    
    
    @objc(_TtCCC15CloverConnector9CLVModels7Account7Account)public class Account: NSObject, NSCoding, Mappable {
      public var id: String?
      public var name: String?
      public var email: String?
      /// The primary merchant
      public var primaryMerchant: CLVModels.Merchant.Merchant?
      /// The primary developer
      public var primaryDeveloper: CLVModels.Developer.Developer?
      /// The primary reseller
      public var primaryReseller: CLVModels.Base.Reference?
      public var isActive: Bool?
      public var createdTime: Date?
      public var claimedTime: Date?
      public var lastLogin: Int?
      public var inviteSent: Bool?
      public var status: String?
      public var role: CLVModels.Employees.Role?
      public var merchants: [CLVModels.Merchant.Merchant]?
      public var developers: [CLVModels.Developer.Developer]?
      public var resellers: [CLVModels.Base.Reference]?
      public var csrfToken: String?
      public var authFactors: [CLVModels.Account.AuthFactor]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(email, forKey: "email")
        aCoder.encode(primaryMerchant, forKey: "primaryMerchant")
        aCoder.encode(primaryDeveloper, forKey: "primaryDeveloper")
        aCoder.encode(primaryReseller, forKey: "primaryReseller")
        aCoder.encode(isActive, forKey: "isActive")
        aCoder.encode(createdTime, forKey: "createdTime")
        aCoder.encode(claimedTime, forKey: "claimedTime")
        aCoder.encode(lastLogin, forKey: "lastLogin")
        aCoder.encode(inviteSent, forKey: "inviteSent")
        aCoder.encode(status, forKey: "status")
        aCoder.encode(role, forKey: "role")
        aCoder.encode(merchants, forKey: "merchants")
        aCoder.encode(developers, forKey: "developers")
        aCoder.encode(resellers, forKey: "resellers")
        aCoder.encode(csrfToken, forKey: "csrfToken")
        aCoder.encode(authFactors, forKey: "authFactors")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        email = aDecoder.decodeObject(forKey: "email") as? String
        primaryMerchant = aDecoder.decodeObject(forKey: "primaryMerchant") as? CLVModels.Merchant.Merchant
        primaryDeveloper = aDecoder.decodeObject(forKey: "primaryDeveloper") as? CLVModels.Developer.Developer
        primaryReseller = aDecoder.decodeObject(forKey: "primaryReseller") as? CLVModels.Base.Reference
        isActive = aDecoder.decodeObject(forKey: "isActive") as? Bool
        createdTime = aDecoder.decodeObject(forKey: "createdTime") as? Date
        claimedTime = aDecoder.decodeObject(forKey: "claimedTime") as? Date
        lastLogin = aDecoder.decodeObject(forKey: "lastLogin") as? Int
        inviteSent = aDecoder.decodeObject(forKey: "inviteSent") as? Bool
        status = aDecoder.decodeObject(forKey: "status") as? String
        role = aDecoder.decodeObject(forKey: "role") as? CLVModels.Employees.Role
        merchants = aDecoder.decodeObject(forKey: "merchants") as? [CLVModels.Merchant.Merchant]
        developers = aDecoder.decodeObject(forKey: "developers") as? [CLVModels.Developer.Developer]
        resellers = aDecoder.decodeObject(forKey: "resellers") as? [CLVModels.Base.Reference]
        csrfToken = aDecoder.decodeObject(forKey: "csrfToken") as? String
        authFactors = aDecoder.decodeObject(forKey: "authFactors") as? [CLVModels.Account.AuthFactor]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        email <- map["email"]
        primaryMerchant <- map["primaryMerchant"]
        primaryDeveloper <- map["primaryDeveloper"]
        primaryReseller <- map["primaryReseller"]
        isActive <- map["isActive"]
        createdTime <- (map["createdTime"], CLVDateTransform())
        claimedTime <- (map["claimedTime"], CLVDateTransform())
        lastLogin <- map["lastLogin"]
        inviteSent <- map["inviteSent"]
        status <- map["status"]
        role <- map["role"]
        merchants <- map["merchants.elements"]
        developers <- map["developers.elements"]
        resellers <- map["resellers.elements"]
        csrfToken <- map["csrfToken"]
        authFactors <- map["authFactors.elements"]
      }
    }
    
    
    @objc(_TtCCC15CloverConnector9CLVModels7Account10AuthFactor)public class AuthFactor: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      public var type_: CLVModels.Account.AuthFactorType? = nil
      public var phoneNumber: String?
      public var backupCodes: String?
      public var totpKey: String?
      public var createdTime: Date?
      
       
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(type_?.rawValue, forKey: "type_")
        aCoder.encode(phoneNumber, forKey: "phoneNumber")
        aCoder.encode(backupCodes, forKey: "backupCodes")
        aCoder.encode(totpKey, forKey: "totpKey")
        aCoder.encode(createdTime, forKey: "createdTime")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        if let typeString = (aDecoder.decodeObject(forKey: "type_") as? String) {
            type_ = CLVModels.Account.AuthFactorType(rawValue: typeString)
        }
        phoneNumber = aDecoder.decodeObject(forKey: "phoneNumber") as? String
        backupCodes = aDecoder.decodeObject(forKey: "backupCodes") as? String
        totpKey = aDecoder.decodeObject(forKey: "totpKey") as? String
        createdTime = aDecoder.decodeObject(forKey: "createdTime") as? Date
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        type_ <- map["type"]
        phoneNumber <- map["phoneNumber"]
        backupCodes <- map["backupCodes"]
        totpKey <- map["totpKey"]
        createdTime <- (map["createdTime"], CLVDateTransform())
      }
    }
    
    
    
    public enum AuthFactorType: String {
      case SMS
      case TOTP
      case BACKUP_CODES
    }
    
  }
}
